# This workflow will build and push a Docker container to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-custom-container?tabs=dotnet&pivots=container-linux
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Create a GitHub Personal access token with "repo" and "read:packages" permissions.
#
# 4. Create three app settings on your Azure Web app:
#       DOCKER_REGISTRY_SERVER_URL: Set this to "https://ghcr.io"
#       DOCKER_REGISTRY_SERVER_USERNAME: Set this to the GitHub username or organization that owns the repository
#       DOCKER_REGISTRY_SERVER_PASSWORD: Set this to the value of your PAT token from the previous step
#
# 5. Change the value for the AZURE_WEBAPP_NAME.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Deploy to Railway
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      # 1. Descargar c√≥digo
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
      
      # 2. Configurar Java 17
      - name: Configurar JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      # 3. Cache Maven
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      # 4. Dar permisos al Maven Wrapper
      - name: Dar permisos al Maven Wrapper
        run: chmod +x ./mvnw
        
      # 5. Compilar aplicaci√≥n
      - name: Compilar aplicaci√≥n
        run: ./mvnw clean package -DskipTests
          
      # 6. Setup Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      # 7. Login a Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      # 8. Build y Push imagen a Docker Hub
      - name: Build and push container image to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          file: ./Dockerfile
          tags: |
            ${{ vars.DOCKERHUB_USERNAME }}/mi-app-spring:latest
            ${{ vars.DOCKERHUB_USERNAME }}/mi-app-spring:${{ github.sha }}
            
     
          
      # 10. Notificar √©xito
      - name: Deploy exitoso
        run: |
          echo "üéâ ¬°Deploy completado exitosamente!"
          echo "üê≥ Docker Hub: ${{ vars.DOCKERHUB_USERNAME }}/mi-app-spring:latest"
          echo "üè∑Ô∏è Tag: ${{ github.sha }}"
          echo "üöÄ Tu app est√° desplegada en Railway!"
